INCLUDE "Expression.ag"

imports
{
-- ExpressionAttr.ag imports
import UU.DData.Seq(Seq)
import HsTokenScanner(lexTokens)
import HsToken(HsTokensRoot(HsTokensRoot))
import SemHsTokens(sem_HsTokensRoot,wrap_HsTokensRoot, Syn_HsTokensRoot(..),Inh_HsTokensRoot(..))
import ErrorMessages(Error)
import CommonTypes(Name)
}

ATTR Expression [ nt,con   :{Name}
                  fieldnames   :{[Name]}
                  attrs    :{[(Name,Name)]}
                ||
                  errors   :{Seq Error}
                  usedLocals:{[Name]}
                  usedAttrs :{[(Name,Name)]}
                  textLines :{[String]}
                ]

SEM Expression
  | Expression  loc.(errors,textLines,usedAttrs,usedLocals)
                            = let inherited = Inh_HsTokensRoot
                                              { attrs_Inh_HsTokensRoot   = @lhs.attrs
                                              , con_Inh_HsTokensRoot     = @lhs.con
                                              , fieldnames_Inh_HsTokensRoot  = @lhs.fieldnames
                                              , nt_Inh_HsTokensRoot      = @lhs.nt
                                              }
                                  synthesized = wrap_HsTokensRoot (sem_HsTokensRoot (HsTokensRoot $ lexTokens @pos @txt)) inherited
                              in case synthesized of
                                   Syn_HsTokensRoot
                                    { errors_Syn_HsTokensRoot     = errors
                                    , textLines_Syn_HsTokensRoot  = textLines
                                    , usedAttrs_Syn_HsTokensRoot  = usedAttrs
                                    , usedLocals_Syn_HsTokensRoot = usedLocals
                                    }  -> (errors,textLines,usedAttrs,usedLocals)                                 